# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import payment_messages_pb2 as payment__messages__pb2


class PaymentStub(object):
    """Your service definition and message types go here
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MakePayment = channel.unary_unary(
                '/payment.Payment/MakePayment',
                request_serializer=payment__messages__pb2.PaymentRequest.SerializeToString,
                response_deserializer=payment__messages__pb2.Transaction.FromString,
                )
        self.GetTransactionHistory = channel.unary_stream(
                '/payment.Payment/GetTransactionHistory',
                request_serializer=payment__messages__pb2.User.SerializeToString,
                response_deserializer=payment__messages__pb2.Transaction.FromString,
                )
        self.GetAccountBalance = channel.unary_unary(
                '/payment.Payment/GetAccountBalance',
                request_serializer=payment__messages__pb2.User.SerializeToString,
                response_deserializer=payment__messages__pb2.User.FromString,
                )
        self.AddAccount = channel.unary_unary(
                '/payment.Payment/AddAccount',
                request_serializer=payment__messages__pb2.User.SerializeToString,
                response_deserializer=payment__messages__pb2.User.FromString,
                )


class PaymentServicer(object):
    """Your service definition and message types go here
    """

    def MakePayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransactionHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MakePayment': grpc.unary_unary_rpc_method_handler(
                    servicer.MakePayment,
                    request_deserializer=payment__messages__pb2.PaymentRequest.FromString,
                    response_serializer=payment__messages__pb2.Transaction.SerializeToString,
            ),
            'GetTransactionHistory': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTransactionHistory,
                    request_deserializer=payment__messages__pb2.User.FromString,
                    response_serializer=payment__messages__pb2.Transaction.SerializeToString,
            ),
            'GetAccountBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccountBalance,
                    request_deserializer=payment__messages__pb2.User.FromString,
                    response_serializer=payment__messages__pb2.User.SerializeToString,
            ),
            'AddAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAccount,
                    request_deserializer=payment__messages__pb2.User.FromString,
                    response_serializer=payment__messages__pb2.User.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'payment.Payment', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Payment(object):
    """Your service definition and message types go here
    """

    @staticmethod
    def MakePayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/payment.Payment/MakePayment',
            payment__messages__pb2.PaymentRequest.SerializeToString,
            payment__messages__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTransactionHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/payment.Payment/GetTransactionHistory',
            payment__messages__pb2.User.SerializeToString,
            payment__messages__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccountBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/payment.Payment/GetAccountBalance',
            payment__messages__pb2.User.SerializeToString,
            payment__messages__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/payment.Payment/AddAccount',
            payment__messages__pb2.User.SerializeToString,
            payment__messages__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
